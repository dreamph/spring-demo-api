buildscript {

    ext {
        junit_version = '4.12'
        spring_boot_version = '2.2.3.RELEASE'
        spring_boot_gradle_plugin_version = '2.2.3.RELEASE'
        slf4j_version = '1.7.25'
        log4j_version = '2.11.2'

        junitVersion = '4.12'
        springfoxSwaggerVersion = '2.9.2'
        commonsLangVersion = '3.7'
        jsonapiVersion = '1.1.3'
        httpclientVersion = '4.5.3'
        lombokVersion = '1.18.10'
        commonsCodecVersion = '1.11'
        commonsCsvVersion = '1.6'
        jsonwebtokenJwtVersion = '0.9.1'
        retrofit_version = '2.4.0'
        mapstructVersion = "1.3.1.Final"
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"
    }
}

plugins {
	id 'org.springframework.boot' version '2.2.3.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
}


group = 'com.dreamph'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

bootJar {
    launchScript()
    mainClassName = 'com.dreamph.apps.ApiApplication'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	runtimeOnly 'com.microsoft.sqlserver:mssql-jdbc'

    compile group: 'commons-io', name: 'commons-io', version: '2.6'


	implementation("io.springfox:springfox-swagger2:${springfoxSwaggerVersion}")
    implementation("io.springfox:springfox-swagger-ui:${springfoxSwaggerVersion}")

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
    implementation("org.apache.commons:commons-lang3:${commonsLangVersion}")
    implementation "javax.json:javax.json-api:${jsonapiVersion}"
    implementation "commons-codec:commons-codec:${commonsCodecVersion}"

	compileOnly("org.projectlombok:lombok:${lombokVersion}")
    testCompileOnly("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
}

test {
	useJUnitPlatform()
}
